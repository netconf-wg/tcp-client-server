<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc linkmailto="no" ?>
<?rfc editing="no" ?>
<?rfc comments="yes" ?>
<?rfc inline="yes"?>
<?rfc rfcedstyle="yes"?>
<?rfc-ext allow-markup-in-artwork="yes" ?>
<?rfc-ext include-index="no" ?>
<!--<?rfc strict="no"?> -->

<rfc xmlns:xi="http://www.w3.org/2001/XInclude"
     category="std"
     consensus="true"
     docName="draft-ietf-netconf-tcp-client-server-latest"
     ipr="trust200902">
  <front>
    <title abbrev="Groupings for TCP Clients and Servers">YANG Groupings for
      TCP Clients and TCP Servers</title>
    <author fullname="Kent Watsen" initials="K." surname="Watsen">
      <organization>Watsen Networks</organization>
      <address>
        <email>kent+ietf@watsen.net</email>
      </address>
    </author>
    <author fullname="Michael Scharf" initials="M." surname="Scharf">
      <organization abbrev="Hochschule Esslingen">
        Hochschule Esslingen - University of Applied Sciences
      </organization>
      <address>
        <email>michael.scharf@hs-esslingen.de</email>
      </address>
    </author>
    <date/>
    <area>Operations</area>
    <workgroup>NETCONF Working Group</workgroup>
    <abstract>
      <t>This document defines three YANG 1.1 modules
        to support the configuration of TCP clients and TCP servers. The modules
        include basic parameters of a TCP connection relevant for client or server
        applications, as well as client configuration required for traversing proxies.
        The modules can be used either standalone or in conjunction with configuration
        of other stack protocol layers.</t>
    </abstract>
    <note title="Editorial Note (To be removed by RFC Editor)">
      <t>This draft contains placeholder values that need to be replaced
        with finalized values at the time of publication. This note summarizes
        all of the substitutions that are needed. No other RFC Editor
        instructions are specified elsewhere in this document.</t>
      <t>Artwork in this document contains shorthand references to drafts in
        progress.  Please apply the following replacements:
      <list style="symbols">
          <t><spanx style="verb">AAAA</spanx> --&gt; the assigned RFC value for draft-ietf-netconf-crypto-types</t>
          <t><spanx style="verb">DDDD</spanx> --&gt; the assigned RFC value for this draft</t>
        </list>
      </t>
      <t>Artwork in this document contains placeholder values for the date of
        publication of this draft. Please apply the following replacement:
        <list style="symbols">
          <t><spanx style="verb">YYYY-MM-DD</spanx> --&gt; the publication date of this draft</t>
        </list>
      </t>
      <t>The following Appendix section is to be removed prior to publication:
        <list style="symbols">
          <t><xref target="change-log"/>.  Change Log</t>
        </list>
      </t>
    </note>
  </front>
  <middle>
    <section title="Introduction">
      <t>This document defines three YANG 1.1 <xref target="RFC7950"/> modules
        to support the configuration of TCP clients and TCP servers (TCP is
        defined in <xref target="RFC0793"/>), either as standalone or in
          conjunction with configuration of other stack protocol layers.</t>

      <t>The modules focus on three different types of base TCP parameters that matter
        for TCP-based applications: First, the modules cover fundamental configuration of a
        TCP client or TCP server application, such as addresses and port numbers. Second, a
        reusable grouping enables modification of application-specific parameters for a TCP
        connections, such as use of TCP keep-alives. And third, client configuration for
        traversing proxies is included as well. In each case, the modules have a very narrow
        scope and focus on a minimum set of required parameters.</t>

INSERT_TEXT_FROM_FILE(../common-intro-snippet.xml,150)

      <section title="Adherence to the NMDA">
        <t>This document is compliant with the Network Management Datastore
          Architecture (NMDA) <xref target="RFC8342"/>. It does not define
          any protocol accessible nodes that are "config false".</t>
      </section>

        <section title="Conventions">
          <t>Various examples used in this document use a placeholder
            value for binary data that has been base64 encoded (e.g.,
            "BASE64VALUE=").  This placeholder value is used as real
            base64 encoded structures are often many lines long and
            hence distracting to the example being presented.</t>
        </section>

    </section>

    <section anchor="tcp-common-model" title="The &quot;ietf-tcp-common&quot; Module">

      <t>This section defines a YANG 1.1 module called
        "ietf-tcp-common".  A high-level overview of the module is provided in
        <xref target="common-overview"/>. Examples illustrating the module's use
        are provided in <xref target="common-examples">Examples</xref>. The YANG
        module itself is defined in <xref target="common-yang-module"/>.</t>

      <section title="Data Model Overview" anchor="common-overview">

        <t>This section provides an overview of the "ietf-tcp-common" module
          in terms of its features and groupings.</t>

        <section title="Model Scope" toc="exclude">
          <t>This document defines a common "grouping" statement for basic TCP connection
            parameters that matter to applications. In some TCP stacks, such parameters
            can also directly be set by an application using system calls, such as the
            sockets API. The base YANG model in this document focuses on modeling TCP
            keep-alives. This base model can be extended as needed.</t>
        </section>

        <section title="Features" anchor="common-features" toc="exclude">
          <t>The following diagram lists all the "feature" statements
            defined in the "ietf-tcp-common" module:</t>
          <t>
            <figure>
              <artwork><![CDATA[
Features:
  +-- keepalives-supported
]]></artwork>
            </figure>
          </t>
          <aside>
            <t>The diagram above uses syntax that is similar to but not
              defined in <xref target="RFC8340"/>.</t>
          </aside>
        </section>

        <section title="Groupings" toc="exclude">
          <t>The "ietf-tcp-common" module defines the following "grouping" statement:</t>
          <ul spacing="compact">
            <li>tcp-common-grouping</li>
          </ul>
          <t>This grouping is presented in the following subsection.</t>

          <section title="The &quot;tcp-common-grouping&quot; Grouping" anchor="tcp-common-grouping">
            <t>The following tree diagram <xref target="RFC8340"/> illustrates the
              "tcp-common-grouping" grouping:</t>
            <t>
              <figure>
               <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/tree-tcp-common-grouping.no-expand.txt)
]]></artwork>
              </figure>
            </t>
            <t>Comments:</t>
            <ul>
              <li>The "keepalives" node is a "presence" node so that the mandatory descendant nodes
                 do not imply that keepalives must be configured.</li>
              <li>The "idle-time", "max-probes", and "probe-interval" nodes have the
                common meanings.  Please see the YANG module in <xref target="common-yang-module"/>
                for details.</li>
            </ul>
          </section>
        </section>

        <section title="Protocol-accessible Nodes" toc="exclude">
          <t>The "ietf-tcp-common" module defines only "grouping" statements that are used by
            other modules to instantiate protocol-accessible nodes.</t>
        </section>

        <section title="Guidelines for Configuring TCP Keep-Alives" toc="exclude">
          <t>Network stacks may include "keep-alives" in their TCP implementations,
            although this practice is not universally accepted. If keep-alives are
            included, <xref target="RFC1122"/> mandates that the application MUST be
            able to turn them on or off for each TCP connection, and that they MUST
            default to off.</t>
          <t>Keep-alive mechanisms exist in many protocols. Depending on the protocol
            stack, TCP keep-alives may only be one out of several alternatives.  Which
            mechanism(s) to use depends on the use case and application requirements. If
            keep-alives are needed by an application, it is RECOMMENDED that the
            aliveness check happens only at the protocol layers that are meaningful
            to the application.</t>
          <t>A TCP keep-alive mechanism SHOULD only be invoked in server applications
            that might otherwise hang indefinitely and consume resources unnecessarily
            if a client crashes or aborts a connection during a network failure <xref target="RFC1122"/>.
            TCP keep-alives may consume significant resources both in the network and
            in endpoints (e.g., battery power).  In addition, frequent keep-alives
            risk network congestion. The higher the frequency of keep-alives, the
            higher the overhead.</t>
          <t>
            Given the cost of keep-alives, parameters have to be configured carefully:
            <list style="symbols">
              <t>The default idle interval (leaf "idle-time") MUST default to no less
                than two hours, i.e., 7200 seconds <xref target="RFC1122"/>. A lower value MAY be
                configured, but keep-alive messages SHOULD NOT be transmitted more
                frequently than once every 15 seconds. Longer intervals SHOULD be
                used when possible.</t>
              <t>The maximum number of sequential keep-alive probes that can fail
                (leaf "max-probes") trades off responsiveness and robustness against
                packet loss. ACK segments that contain no data are not reliably
                transmitted by TCP. Consequently, if a keep-alive mechanism is
                implemented it MUST NOT interpret failure to respond to any
                specific probe as a dead connection <xref target="RFC1122"/>. 
                Typically, a single-digit number should suffice.</t>
              <t>TCP implementations may include a parameter for the number of
                seconds between TCP keep-alive probes (leaf "probe-interval"). In
                order to avoid congestion, the time interval between probes MUST NOT
                be smaller than one second. Significantly longer intervals SHOULD be
                used. It is important to note that keep-alive probes (or replies)
                can get dropped due to network congestion. Sending further probe
                messages into a congested path after a short interval, without
                backing off timers, could cause harm and result in a congestion
                collapse.  Therefore it is essential to pick a large, conservative
                value for this interval.</t>
            </list>
          </t>
        </section>
      </section>

      <section title="Example Usage" anchor="common-examples">
        <t>This section presents an example showing the "tcp-common-grouping"
        populated with some data.</t>
        <t>
          <figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-tcp-common.xml)
]]></artwork>
          </figure></t>
      </section>

      <section anchor="common-yang-module" title="YANG Module">
        <t>The ietf-tcp-common YANG module references <xref target="RFC6991"/>.</t>
        <t><figure>
            <preamble>&lt;CODE BEGINS&gt; file "ietf-tcp-common@YYYY-MM-DD.yang"</preamble>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(ietf-tcp-common@YYYY-MM-DD.yang)
]]></artwork>
        <postamble>&lt;CODE ENDS&gt;</postamble>
        </figure></t>
      </section>
    </section>

    <section anchor="tcp-client-model" title="The &quot;ietf-tcp-client&quot; Module">

      <t>This section defines a YANG 1.1 module called
        "ietf-tcp-client".  A high-level overview of the module is provided in
        <xref target="client-overview"/>. Examples illustrating the module's use
        are provided in <xref target="client-examples">Examples</xref>. The YANG
        module itself is defined in <xref target="client-yang-module"/>.</t>

      <section title="Data Model Overview" anchor="client-overview">

        <t>This section provides an overview of the "ietf-tcp-client" module
          in terms of its features and groupings.</t>

        <section title="Features" toc="exclude">
          <t>The following diagram lists all the "feature" statements
            defined in the "ietf-tcp-client" module:</t>
          <t>
            <figure>
              <artwork><![CDATA[
Features:
  +-- local-binding-supported
  +-- tcp-client-keepalives
  +-- proxy-connect
  +-- socks5-gss-api
  +-- socks5-username-password
]]></artwork>
            </figure>
          </t>
          <aside>
            <t>The diagram above uses syntax that is similar to but not
              defined in <xref target="RFC8340"/>.</t>
          </aside>
        </section>

        <section title="Groupings" toc="exclude">
          <t>The "ietf-tcp-client" module defines the following "grouping" statement:</t>
          <ul spacing="compact">
            <li>tcp-client-grouping</li>
          </ul>
          <t>This grouping is presented in the following subsection.</t>

          <section title="The &quot;tcp-client-grouping&quot; Grouping" anchor="tcp-client-grouping">
            <t>The following tree diagram <xref target="RFC8340"/> illustrates the
              "tcp-client-grouping" grouping:</t>
            <t>
              <figure>
               <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/tree-tcp-client-grouping.no-expand.txt)
]]></artwork>
              </figure>
            </t>
            <t>Comments:</t>
            <ul>
              <li>The "remote-address" node, which is mandatory, may be configured as
                an IPv4 address, an IPv6 address, a hostname.</li>
              <li>The "remote-port" node is not mandatory, but its default value is 
                the invalid value '0', thus forcing the consuming data model to
                refine it in order to provide it an appropriate default value.</li>
              <li>The "local-address" node, which is enabled by the "local-binding-supported"
                feature (<xref target="common-features"/>), may be configured as
                an IPv4 address, an IPv6 address, or a wildcard value.</li>
              <li>The "local-port" node, which is enabled by the "local-binding-supported"
                feature (<xref target="common-features"/>), is not mandatory. Its default
                value is '0', indicating that the operating system can pick an
                arbitrary port number.</li>
              <li>The "proxy-server" node is enabled by a "feature" statement and, for
                servers that enable it, is a "presence" container so that the descendant
                "mandatory true" choice node does not imply that the proxy-server node
                must be configured.</li>
              <li>This grouping uses the "tcp-common-grouping" grouping discussed in
                <xref target="tcp-common-grouping"/>.</li>
            </ul>
          </section>
        </section>

        <section title="Protocol-accessible Nodes" toc="exclude">
          <t>The "ietf-tcp-client" module defines only "grouping" statements that are used by
            other modules to instantiate protocol-accessible nodes.</t>
        </section>
      </section>

      <section title="Example Usage" anchor="client-examples">
        <t>This section presents two examples showing the "tcp-client-grouping"
          populated with some data.  This example shows a TCP-client configured to
          not connect via a proxy:</t>
        <t>
          <figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-tcp-client.xml)
]]></artwork>
          </figure>
        </t>
        <t>This example shows a TCP-client configured to connect via a proxy:</t>
        <t>
          <figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-tcp-client-proxy.xml)
]]></artwork>
          </figure>
        </t>
      </section>

      <section anchor="client-yang-module" title="YANG Module">
        <t>The ietf-tcp-client YANG module references <xref target="RFC6991"/>.</t>
        <t><figure>
            <preamble>&lt;CODE BEGINS&gt; file "ietf-tcp-client@YYYY-MM-DD.yang"</preamble>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(ietf-tcp-client@YYYY-MM-DD.yang)
]]></artwork>
            <postamble>&lt;CODE ENDS&gt;</postamble>
          </figure></t>
      </section>
    </section>

    <section anchor="tcp-server-model" title="The &quot;ietf-tcp-server&quot; Module">

      <t>This section defines a YANG 1.1 module called
        "ietf-tcp-server".  A high-level overview of the module is provided in
        <xref target="server-overview"/>. Examples illustrating the module's use
        are provided in <xref target="server-examples">Examples</xref>. The YANG
        module itself is defined in <xref target="server-yang-module"/>.</t>

      <section title="Data Model Overview" anchor="server-overview">

        <t>This section provides an overview of the "ietf-tcp-server" module
          in terms of its features and groupings.</t>

        <section title="Features" toc="exclude">
          <t>The following diagram lists all the "feature" statements
            defined in the "ietf-tcp-server" module:</t>
          <t>
            <figure>
              <artwork><![CDATA[
Features:
  +-- tcp-server-keepalives
]]></artwork>
            </figure>
          </t>
          <aside>
            <t>The diagram above uses syntax that is similar to but not
              defined in <xref target="RFC8340"/>.</t>
          </aside>
        </section>

        <section title="Groupings" toc="exclude">
          <t>The "ietf-tcp-server" module defines the following "grouping" statement:</t>
          <ul spacing="compact">
            <li>tcp-server-grouping</li>
          </ul>
          <t>This grouping is presented in the following subsection.</t>

          <section title="The &quot;tcp-server-grouping&quot; Grouping" anchor="tcp-server-grouping">
            <t>The following tree diagram <xref target="RFC8340"/> illustrates the
              "tcp-server-grouping" grouping:</t>
            <t>
              <figure>
               <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/tree-tcp-server-grouping.no-expand.txt)
]]></artwork>
              </figure>
            </t>
            <t>Comments:</t>
            <ul>
              <li>The "local-address" node, which is mandatory, may be configured as
                an IPv4 address, an IPv6 address, or a wildcard value.</li>
              <li>The "local-port" node is not mandatory, but its default value is 
                the invalid value '0', thus forcing the consuming data model to
                refine it in order to provide it an appropriate default value.</li>
              <li>This grouping uses the "tcp-common-grouping" grouping discussed in
                <xref target="tcp-common-grouping"/>.</li>
            </ul>
          </section>
        </section>

        <section title="Protocol-accessible Nodes" toc="exclude">
          <t>The "ietf-tcp-server" module defines only "grouping" statements that are used by
            other modules to instantiate protocol-accessible nodes.</t>
        </section>
      </section>

      <section title="Example Usage" anchor="server-examples">
        <t>This section presents an example showing the "tcp-server-grouping"
        populated with some data.</t>
        <t>
          <figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-tcp-server.xml)
]]></artwork>
          </figure></t>
      </section>

      <section anchor="server-yang-module" title="YANG Module">
        <t>The ietf-tcp-server YANG module references <xref target="RFC6991"/>.</t>
        <t>
          <figure>
            <preamble>&lt;CODE BEGINS&gt; file "ietf-tcp-server@YYYY-MM-DD.yang"</preamble>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(ietf-tcp-server@YYYY-MM-DD.yang)
]]></artwork>
          <postamble>&lt;CODE ENDS&gt;</postamble>
        </figure></t>
      </section>
    </section>


    <section title="Security Considerations">

      <section title='The "ietf-tcp-common" YANG Module'>
        <t>The "ietf-tcp-common" YANG module defines "grouping" statements
          that are designed to be accessed via YANG based management
          protocols, such as NETCONF <xref target="RFC6241"/> and RESTCONF
          <xref target="RFC8040"/>.  Both of these protocols have
          mandatory-to-implement secure transport layers (e.g., SSH, TLS)
          with mutual authentication.</t>

        <t>The NETCONF access control model (NACM) <xref target="RFC8341"/>
          provides the means to restrict access for particular users to a
          pre-configured subset of all available protocol operations and
          content.</t>

        <t>Since the module in this document only define groupings,
          these considerations are primarily for the designers of other
          modules that use these groupings.</t>

        <t>None of the readable data nodes defined in this YANG module are
          considered sensitive or vulnerable in network environments.
          The NACM "default-deny-all" extension has not been set for
          any data nodes defined in this module.</t>

        <t>None of the writable data nodes defined in this YANG module are
          considered sensitive or vulnerable in network environments.
          The NACM "default-deny-write" extension has not been set for
          any data nodes defined in this module.</t>

        <t>This module does not define any RPCs, actions, or notifications,
          and thus the security consideration for such is not provided here.</t>
      </section>

      <section title='The "ietf-tcp-client" YANG Module'>
        <t>The "ietf-tcp-client" YANG module defines "grouping" statements
          that are designed to be accessed via YANG based management
          protocols, such as NETCONF <xref target="RFC6241"/> and RESTCONF
          <xref target="RFC8040"/>.  Both of these protocols have
          mandatory-to-implement secure transport layers (e.g., SSH, TLS)
          with mutual authentication.</t>

        <t>The NETCONF access control model (NACM) <xref target="RFC8341"/>
          provides the means to restrict access for particular users to a
          pre-configured subset of all available protocol operations and
          content.</t>

        <t>Since the module in this document only define groupings,
          these considerations are primarily for the designers of other
          modules that use these groupings.</t>

        <t>One readable data node defined in this YANG module may be considered
          sensitive or vulnerable in some network environments. This
          node is as follows:
          <list style="symbols">
            <t>The "proxy-server/socks5-parameters/authentication-parameters/username-password/password" node:
              <ul empty="true">
                <li>The cleartext "password" node defined in the "tcp-client-grouping"
                  grouping is additionally sensitive to read operations such that,
                  in normal use cases, it should never be returned to a client.
                  For this reason, the NACM extension "default-deny-all" has been
                  applied to it.</li>
              </ul>
            </t>
          </list>
        </t>

        <t>None of the writable data nodes defined in this YANG module are
          considered sensitive or vulnerable in network environments.
          The NACM "default-deny-write" extension has not been set for
          any data nodes defined in this module.</t>

        <t>This module does not define any RPCs, actions, or notifications,
          and thus the security consideration for such is not provided here.</t>

        <t>Implementations are RECOMMENDED to implement the "local-binding-supported"
          feature for cryptographically-secure protocols, so as to enable more
          granular ingress/egress firewall rulebases.  It is NOT RECOMMENDED to
          implement this feature for unsecure protocols, as per <xref target="RFC6056"/>.</t>
      </section>

      <section title='The "ietf-tcp-server" YANG Module'>
        <t>The "ietf-tcp-server" YANG module defines "grouping" statements
          that are designed to be accessed via YANG based management
          protocols, such as NETCONF <xref target="RFC6241"/> and RESTCONF
          <xref target="RFC8040"/>.  Both of these protocols have
          mandatory-to-implement secure transport layers (e.g., SSH, TLS)
          with mutual authentication.</t>

        <t>The NETCONF access control model (NACM) <xref target="RFC8341"/>
          provides the means to restrict access for particular users to a
          pre-configured subset of all available protocol operations and
          content.</t>

        <t>Since the module in this document only define groupings,
          these considerations are primarily for the designers of other
          modules that use these groupings.</t>

        <t>None of the readable data nodes defined in this YANG module are
          considered sensitive or vulnerable in network environments.
          The NACM "default-deny-all" extension has not been set for
          any data nodes defined in this module.</t>

        <t>None of the writable data nodes defined in this YANG module are
          considered sensitive or vulnerable in network environments.
          The NACM "default-deny-write" extension has not been set for
          any data nodes defined in this module.</t>

        <t>This module does not define any RPCs, actions, or notifications,
          and thus the security consideration for such is not provided here.</t>
      </section>
    </section>

    <section title="IANA Considerations">
      <section title='The "IETF XML" Registry'>
        <t>This document registers two URIs in the "ns" subregistry of the
        IETF XML Registry <xref target="RFC3688"/>. Following the format in
        <xref target="RFC3688"/>, the following registrations are
        requested:</t>
        <t><figure>
            <artwork>
   URI: urn:ietf:params:xml:ns:yang:ietf-tcp-common
   Registrant Contact: The IESG
   XML: N/A, the requested URI is an XML namespace.

   URI: urn:ietf:params:xml:ns:yang:ietf-tcp-client
   Registrant Contact: The IESG
   XML: N/A, the requested URI is an XML namespace.

   URI: urn:ietf:params:xml:ns:yang:ietf-tcp-server
   Registrant Contact: The IESG
   XML: N/A, the requested URI is an XML namespace.
</artwork>
          </figure></t>
      </section>

      <section title='The "YANG Module Names" Registry'>
        <t>This document registers two YANG modules in the YANG Module Names
        registry <xref target="RFC6020"/>. Following the format in <xref
        target="RFC6020"/>, the following registrations are requested:</t>
        <t><figure>
            <artwork>
   name:         ietf-tcp-common
   namespace:    urn:ietf:params:xml:ns:yang:ietf-tcp-common
   prefix:       tcpcmn
   reference:    RFC DDDD

   name:         ietf-tcp-client
   namespace:    urn:ietf:params:xml:ns:yang:ietf-tcp-client
   prefix:       tcpc
   reference:    RFC DDDD

   name:         ietf-tcp-server
   namespace:    urn:ietf:params:xml:ns:yang:ietf-tcp-server
   prefix:       tcps
   reference:    RFC DDDD
</artwork>
          </figure></t>
      </section>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.2119.xml"?>
      <?rfc include="reference.RFC.6020.xml"?>
      <?rfc include="reference.RFC.6991.xml"?>
      <?rfc include="reference.RFC.7950.xml"?>
      <?rfc include="reference.RFC.8174.xml"?>
      <?rfc include="reference.RFC.8341.xml"?>
    </references>

    <references title="Informative References">
      <?rfc include="reference.RFC.0793.xml"?>
      <?rfc include="reference.RFC.1122.xml"?>
      <?rfc include="reference.RFC.3688.xml"?>
      <?rfc include="reference.RFC.6056.xml"?>
      <?rfc include="reference.RFC.6241.xml"?>
      <?rfc include="reference.RFC.8040.xml"?>
      <?rfc include="reference.RFC.8340.xml"?>
      <?rfc include="reference.RFC.8342.xml"?>
      <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-crypto-types.xml"/>
      <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-trust-anchors.xml"/>
      <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-keystore.xml"/>
      <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-tcp-client-server.xml"/>
      <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-ssh-client-server.xml"/>
      <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-tls-client-server.xml"/>
      <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-http-client-server.xml"/>
      <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-netconf-client-server.xml"/>
      <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-restconf-client-server.xml"/>
    </references>

    <section title="Change Log" removeInRFC="true" anchor="change-log">
      <section title="00 to 01">
        <t>
          <list style="symbols">
            <t>Added 'local-binding-supported' feature to TCP-client model.</t>
            <t>Added 'keepalives-supported' feature to TCP-common model.</t>
            <t>Added 'external-endpoint-values' container and 'external-endpoints' feature to TCP-server model.</t>
          </list>
        </t>
      </section>
      <section title="01 to 02">
        <t>
          <list style="symbols">
            <t>Removed the 'external-endpoint-values' container and 'external-endpoints' feature from the TCP-server model.</t>
          </list>
        </t>
      </section>
      <section title="02 to 03">
        <t>
          <list style="symbols">
            <t>Moved the common model section to be before the client and server specific sections.</t>
            <t>Added sections "Model Scope" and "Usage Guidelines for Configuring TCP Keep-Alives" to
              the common model section.</t>
          </list>
        </t>
      </section>
      <section title="03 to 04">
        <t>
          <list style="symbols">
            <t>Fixed a few typos.</t>
          </list>
        </t>
      </section>
      <section title="04 to 05">
        <t>
          <list style="symbols">
            <t>Removed commented out "grouping tcp-system-grouping" statement kept for reviewers.</t>
            <t>Added a "Note to Reviewers" note to first page.</t>
          </list>
        </t>
      </section>
      <section title="05 to 06">
        <t>
          <list style="symbols">
            <t>Added support for TCP proxies.</t>
          </list>
        </t>
      </section>
      <section title="06 to 07">
        <t>
          <list style="symbols">
            <t>Expanded "Data Model Overview section(s) [remove "wall" of tree diagrams].</t>
            <t>Updated the Security Considerations section.</t>
          </list>
        </t>
      </section>
      <section title="07 to 08">
        <t>
          <list style="symbols">
            <t>Added missing IANA registration for "ietf-tcp-common"</t>
            <t>Added "mandatory true" for the "username" and "password" leafs</t>
            <t>Added an example of a TCP-client configured to connect via a proxy</t>
            <t>Fixed issues found by the SecDir review of the "keystore" draft.</t>
            <t>Updated the "ietf-tcp-client" module to use the new "password-grouping" 
              grouping from the "crypto-types" module.</t>
          </list>
        </t>
      </section>
      <section title="08 to 09">
        <t>
          <list style="symbols">
            <t>Addressed comments raised by YANG Doctor in the ct/ts/ks drafts.</t>
          </list>
        </t>
      </section>
      <section title="09 to 10">
        <t>
          <list style="symbols">
            <t>Updated Abstract and Intro to address comments by Tom Petch.</t>
            <t>Removed the "tcp-connection-grouping" grouping (now models use the "tcp-common-grouping" directly).</t>
            <t>Added XML-comment above examples explaining the reason for the unusual top-most element's presence.</t>
            <t>Added Securty Considerations section for the "local-binding-supported" feature.</t>
            <t>Replaced some hardcoded refs to &lt;xref&gt; elements.</t>
            <t>Fixed nits found by YANG Doctor reviews.</t>
            <t>Aligned modules with `pyang -f` formatting.</t>
            <t>Added an "Acknowledgements" secetion.</t>
          </list>
        </t>
      </section>
      <section title="10 to 11">
        <t>
          <list style="symbols">
            <t>Replaced "base64encodedvalue==" with "BASE64VALUE=" in examples.</t>
            <t>Minor editorial nits</t>

            <t>SUBMISSION PENDING</t>
          </list>
        </t>
      </section>
      <!--
      <section title="11 to 12">
        <t>
          <list style="symbols">
            <t>SUBMISSION PENDING</t>
          </list>
        </t>
      </section>
      -->
    </section>

    <section title="Acknowledgements" numbered="no">
      <t>The authors would like to thank for following for lively discussions
        on list and in the halls (ordered by first name):
        Juergen Schoenwaelder,
        Ladislav Lhotka,
        Nick Hancock,
        and Tom Petch.
      </t>
    </section>

  </back>
</rfc>
